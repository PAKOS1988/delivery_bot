import botcreat

from botcreat import dp
from aiogram import executor
import keyboard
import states
import DB
from aiogram.types import CallbackQuery, Message
count=0
prod_par=[]
@dp.message_handler(commands=['start'])
async def start_cmd(message):
    start_txt=f'{message.from_user.first_name}üëã\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ü§ñ –æ—Ç–¥–µ–ª –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ DokOutsource'
    start_reg=f'–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Å—Ç—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–µ –±—ã–ª–æ –ø—Ä–æ–±–ª–µ–º —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—èüëá:'
    user_id=message.from_user.id
    user_name=message.from_user.first_name
    print(user_id, user_name)
    cheker = DB.get_user_id(user_id)
    if user_id==1268659822:

        await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Ö–æ–∑—è–∏–Ω. –ß—Ç–æ –≤–∞—Å –ø—Ä–∏–≤–µ–ª–æ –≤ –±–æ—Ç?', reply_markup = keyboard.administration())
        await states.Admin.get_status.set()
    elif cheker:

        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç', reply_markup = keyboard.products_kb())

    else:
        await message.answer(start_txt)
        await message.answer(start_reg, reply_markup=keyboard.get_name_kb())
        await states.Reg.get_name.set()

@dp.message_handler(state=states.Admin.get_status)
async def get_name(message, state=states.Admin.get_status):
    if message.text=='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã':
        await message.answer(f'{message.from_user.first_name}, –∫–∞–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å?>>', reply_markup=keyboard.admin_pruducts_edit())
        await state.finish()
        await states.Admin_edit_products.get_status.set()
    elif message.text == '–ó–∞–∫–∞–∑—ã':
        await message.answer(f'{message.from_user.first_name}, –∫–∞–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å?>>',
                             reply_markup=keyboard.admin_pruducts_view())
        await state.finish()
        await states.Admin_view_orders.get_status.set()

@dp.message_handler(state=states.Admin_edit_products.get_status)
async def get_name(message, state=states.Admin_edit_products.get_status):
    if message.text=='–î–æ–±–∞–≤–∏—Ç—åüÜï':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', reply_markup=keyboard.ReplyKeyboardRemove())
        await states.Add.get_name.set()
    elif message.text == '–£–¥–∞–ª–∏—Ç—åüöÆ':
        info_prod=DB.get_products_id_name()
        result = '–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n'
        for i in info_prod:
            result += f'ID = {i[0]}, –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {i[1]}\n'
        await botcreat.bot.send_message(message.from_user.id, text=result)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞', reply_markup=keyboard.ReplyKeyboardRemove())
        await states.Admin_edit_products.del_product.set()
    elif message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—åüìù':
        info_prod=DB.get_products_id_name()
        result = '–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n'
        for i in info_prod:
            result += f'ID = {i[0]}, –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {i[1]}\n'
        await botcreat.bot.send_message(message.from_user.id, text=result)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞', reply_markup=keyboard.ReplyKeyboardRemove())
        await states.Admin_edit_products.edit_product.set()
    elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîô':
        await message.answer('–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard.administration())
        await states.Admin.get_status.set()

@dp.message_handler(state=states.Admin_edit_products.del_product)
async def get_name(message, state=states.Admin_edit_products.del_product):
    info_prod=DB.get_products_id_name()
    id_prod=[i[0] for i in info_prod]
    print(id_prod)
    if int(message.text) in id_prod:
        await message.answer('–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard.administration())
        DB.delete_product(int(message.text))
        await states.Admin.get_status.set()

    else:
        await message.answer(f'{message.from_user.first_name}, –≤–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?>>')
        await states.Admin_edit_products.del_product.set()
@dp.message_handler(state=states.Admin_edit_products.edit_product)
async def get_name(message, state=states.Admin_edit_products.edit_product):
    info_prod=DB.get_products_id_name()
    id_prod=[i[0] for i in info_prod]
    print(id_prod)
    if int(message.text) in id_prod:
        DB.delete_product(int(message.text))
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', reply_markup=keyboard.ReplyKeyboardRemove())
        await states.Add.get_name.set()

    else:
        await message.answer(f'{message.from_user.first_name}, –≤–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?>>')
        await states.Admin_edit_products.edit_product.set()
@dp.message_handler(state=states.Add.get_name)
async def prod_name(message, state=states.Add.get_name):
    name=message.text
    print(name)
    await state.update_data(prod_name=name)
    await message.answer(f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å {name}:>>')
    await states.Add.get_price.set()
@dp.message_handler(state=states.Add.get_price)
async def prod_price(message, state=states.Add.get_price):
    price=float(message.text)
    print(price)
    await state.update_data(prod_price=price)
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:>>')
    await states.Add.get_info.set()

@dp.message_handler(state=states.Add.get_info)
async def prod_price(message, state=states.Add.get_info):
    info=message.text
    print(info)
    await state.update_data(prod_info=info)
    await message.answer('–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:>>')
    await states.Add.get_photo.set()

@dp.message_handler(content_types=['photo'],state=states.Add.get_photo)
async def prod_photo(message, state=states.Add.get_photo):
    photo_id=message.photo[-1].file_id
    print(photo_id)
    await state.update_data(prod_photo=photo_id)
    all_info = await state.get_data()
    id=DB.get_products_id()
    id_prod=len(id)+1
    print(id)
    name = all_info.get('prod_name')
    price = all_info.get('prod_price')
    print(price)
    info = all_info.get('prod_info')
    photo = all_info.get('prod_photo')
    DB.add_product(id_prod, name, price, info, photo)
    print(DB.get_products_all(name))
    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup = keyboard.administration())
    await state.finish()
    await states.Admin.get_status.set()
@dp.message_handler(state=states.Reg.get_name)
async def get_name(message, state=states.Reg.get_name):
    if message.text=='–í–∑—è—Ç—å –∏–∑ –¢–ì –∞–∫–∫–∞—É–Ω—Ç–∞':
        name=message.from_user.first_name
        print(name)
        await state.update_data(user_name=name)
        await message.answer(f'–û—Ç–ª–∏—á–Ω–æ! {name}üëç, —Ç–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ωüëá:', reply_markup=keyboard.phone_number_kb())
        await states.Reg.get_contact.set()
    elif message.text != '–í–∑—è—Ç—å –∏–∑ –¢–ì –∞–∫–∫–∞—É–Ω—Ç–∞' and message.text.isdigit() == False:
        print(message)
        name=message.text
        print(name)
        await state.update_data(user_name=name)
        await message.answer(f'–û—Ç–ª–∏—á–Ω–æ! {name}üëç, —Ç–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ωüëá:',
                             reply_markup=keyboard.phone_number_kb())
        await states.Reg.get_contact.set()
@dp.message_handler(state=states.Reg.get_contact, content_types=['contact'])
async def get_contact(message, state=states.Reg.get_contact):
        phone_number = message.contact.phone_number
        print(F'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}')
        name=await state.get_data()
        await state.update_data(user_contact=phone_number)
        await message.answer(f'–û—Ç–ª–∏—á–Ω–æ! {name["user_name"]}üëç, —Ç–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –í–∞—à—É –ª–æ–∫–∞—Ü–∏—éüëá:', reply_markup=keyboard.location_kb())
        await states.Reg.get_location.set()

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç—Ç–∞–ø–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
@dp.message_handler(state=states.Reg.get_location, content_types=['location'])
async def get_location(message, state=states.Reg.get_location):
        location = (message.location.longitude, message.location.latitude)
        print(f'–õ–æ–∫–∞—Ü–∏—è:{location}')
        name = await state.get_data()
        await state.update_data(user_location=location)
        await message.answer(f'–û—Ç–ª–∏—á–Ω–æ! {name["user_name"]}üëç, —Ç–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –í–∞—à –ø–æ–ªüëá:', reply_markup = keyboard.gender_kb())
        await states.Reg.get_gender.set()

@dp.message_handler(state=states.Reg.get_gender, content_types=['text'])
async def get_gender(message, state=states.Reg.get_gender):

    name = await state.get_data()
    if message.text=='–ú—É–∂—Å–∫–æ–π' or message.text=='–ñ–µ–Ω—Å–∫–∏–π':
        gender=message.text
        print(f'–ü–æ–ª:{gender}')
        await state.update_data(user_gender=gender)
        await message.answer(f'–û—Ç–ª–∏—á–Ω–æ! {name["user_name"]}üëç\n–í—ã –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–ºüéâüéâüéâ', reply_markup=keyboard.products_kb())

    else:
        await message.answer(f'–û–π! {name["user_name"]}\n–í—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –≤—ã–±–æ—Ä–∞!', reply_markup=keyboard.gender_kb())
        await states.Reg.get_gender.set()
    all_info = await state.get_data()
    name = all_info.get('user_name')
    ph_num = all_info.get('user_contact')
    locat = all_info.get('user_location')
    gender = all_info.get('user_gender')
    id = message.from_user.id
    DB.add_user(id,name,ph_num,locat[0],locat[1],gender)
    print(DB.get_user())

# @dp.message_handler(state=states.Cart.wait_products)
# async def cart_products(message, state=states.Cart.wait_products):
#     user_id=message.from_user.id
#     products=DB.get_products_from_carts_user_id(user_id=user_id)
#     print(products)
#     await message.answer(products, reply_markup=keyboard.cart_kb())
#–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(content_types=['text'])
async def process(message):
    user_answer = message.text
    global count
    count=0

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    act_products=[i[0] for i in DB.get_products_names()]
    if user_answer=='–ö–æ—Ä–∑–∏–Ω–∞':
        #–ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_products = DB.get_products_from_carts_user_id(message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        if user_products:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            result = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n'
            for i in user_products:
                result += f'- {i[2]}, –ö–æ–ª-–≤–æ {i[3]}, –°—É–º–º–∞ {i[4]}\n'
            await message.answer(result, reply_markup=keyboard.cart_kb())
            await states.Cart.delete_cart.set()
        else:
            await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è', reply_markup=keyboard.products_kb())
        # await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞',reply_markup=keyboard.cart_kb())

    elif user_answer=='–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
        await message.answer('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞',reply_markup=keyboard.check_order_kb())
        await states.Order.get_location.set()
    elif user_answer in act_products:
        await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {user_answer} ', reply_markup=keyboard.ReplyKeyboardRemove())
        qwerty=DB.get_products_all(user_answer)
        global prod_par
        prod_par=[]
        print(f'–¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–¥—É–∫—Ç–∞ {qwerty}')
        prod_par.insert(0,message.from_user.id)
        prod_par.insert(1,qwerty[0])
        prod_par.insert(2,qwerty[1])
        prod_par.insert(3, qwerty[2])
        print(f'–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥-–ø–∞—Ä {prod_par}')
        await message.answer(f'–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}', reply_markup=keyboard.count_edit_kb())
        # —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    else:
        await message.answer('–í—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ', reply_markup=keyboard.products_kb())

@dp.message_handler(state=states.Cart.delete_cart)
async def delete_cart(message, state=states.Cart.delete_cart):
    user_answer=message.text
    user_id=message.from_user.id
    if user_answer=='–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑':
        DB.delete_products_from_carts_id(user_id)
        await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!')
    elif user_answer=='–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
        # –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_products = DB.get_products_from_carts_user_id(message.from_user.id)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        if user_products:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            result = '–í–∞—à –∑–∞–∫–∞–∑:\n'
            admin_message = '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n'
            for i in user_products:
                result += f'- {i[2]}, –ö–æ–ª-–≤–æ {i[3]}, –°—É–º–º–∞ {i[4]}\n'
                admin_message += f'- {i[2]}, –ö–æ–ª-–≤–æ {i[3]}, –°—É–º–º–∞ {i[4]}\n'
            await message.answer(result, reply_markup=keyboard.products_kb())
            await message.answer('–£—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!')
            await state.finish()
            await botcreat.bot.send_message(1268659822,admin_message)
            DB.delete_products_from_carts_id(user_id)
@dp.callback_query_handler(text='count_increase')
async def count_edit_handler(callback: CallbackQuery):
    user_data = await dp.current_state(user=callback.message.chat.id).get_data()
    if user_data.get('count'):
        print(f'—Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ{user_data.get("count")}')
        count = user_data.get('count')
        await dp.current_state(user=callback.message.chat.id).update_data(count=count + 1)
        user_data = await dp.current_state(user=callback.message.chat.id).get_data()
        count = user_data.get('count')
        print(f'–Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ{user_data.get("count")}')
        await callback.message.edit_text(f'–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}', reply_markup=keyboard.count_edit_kb())
    else:
        await dp.current_state(user=callback.message.chat.id).update_data(count=1)
        await callback.message.edit_text(f'–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1', reply_markup=keyboard.count_edit_kb())

    print(callback.message.text)

@dp.callback_query_handler(text='count_decrease')
async def count_edit_handler(callback:CallbackQuery):

    user_data = await dp.current_state(user=callback.message.chat.id).get_data()
    if user_data.get('count'):
        print(f'—Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ{user_data.get("count")}')
        count = user_data.get('count')
        await dp.current_state(user=callback.message.chat.id).update_data(count=count - 1)
        user_data = await dp.current_state(user=callback.message.chat.id).get_data()
        count = user_data.get('count')
        print(f'–Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ{user_data.get("count")}')
        await callback.message.edit_text(f'–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}', reply_markup=keyboard.count_edit_kb())
    else:
        await dp.current_state(user=callback.message.chat.id).update_data(count=1)

        await callback.message.edit_text(f'–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1', reply_markup=keyboard.count_edit_kb())

@dp.callback_query_handler(text='count_add')
async def count_add_handler(callback: CallbackQuery):
    user_data = await dp.current_state(user=callback.message.chat.id).get_data()
    count=user_data.get('count')
    global prod_par
    prod_par.insert(4,count)
    amount=prod_par[3]*count
    prod_par.insert(5, amount)
    print(prod_par)
    DB.add_product_cart(prod_par[0],prod_par[1],prod_par[2],prod_par[4],prod_par[5])
    await callback.answer(f'–î–æ–±–∞–≤–ª–µ–Ω–æ {prod_par[2]} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {count} —à—Ç', show_alert=True)
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç', reply_markup=keyboard.products_kb())
    await callback.message.edit_reply_markup(reply_markup=None)




executor.start_polling(dp)

